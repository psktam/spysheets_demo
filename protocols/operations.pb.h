// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocols/operations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocols_2foperations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocols_2foperations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocols_2foperations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocols_2foperations_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocols_2foperations_2eproto;
namespace operations {
class ActionSpecification;
struct ActionSpecificationDefaultTypeInternal;
extern ActionSpecificationDefaultTypeInternal _ActionSpecification_default_instance_;
class ActionSpecification_Argument;
struct ActionSpecification_ArgumentDefaultTypeInternal;
extern ActionSpecification_ArgumentDefaultTypeInternal _ActionSpecification_Argument_default_instance_;
class CellArray;
struct CellArrayDefaultTypeInternal;
extern CellArrayDefaultTypeInternal _CellArray_default_instance_;
}  // namespace operations
PROTOBUF_NAMESPACE_OPEN
template<> ::operations::ActionSpecification* Arena::CreateMaybeMessage<::operations::ActionSpecification>(Arena*);
template<> ::operations::ActionSpecification_Argument* Arena::CreateMaybeMessage<::operations::ActionSpecification_Argument>(Arena*);
template<> ::operations::CellArray* Arena::CreateMaybeMessage<::operations::CellArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace operations {

// ===================================================================

class CellArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations.CellArray) */ {
 public:
  inline CellArray() : CellArray(nullptr) {}
  ~CellArray() override;
  explicit PROTOBUF_CONSTEXPR CellArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellArray(const CellArray& from);
  CellArray(CellArray&& from) noexcept
    : CellArray() {
    *this = ::std::move(from);
  }

  inline CellArray& operator=(const CellArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellArray& operator=(CellArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellArray* internal_default_instance() {
    return reinterpret_cast<const CellArray*>(
               &_CellArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CellArray& a, CellArray& b) {
    a.Swap(&b);
  }
  inline void Swap(CellArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CellArray& from) {
    CellArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations.CellArray";
  }
  protected:
  explicit CellArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kRowsFieldNumber = 1,
    kColsFieldNumber = 2,
  };
  // repeated string values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // optional int64 rows = 1;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  int64_t rows() const;
  void set_rows(int64_t value);
  private:
  int64_t _internal_rows() const;
  void _internal_set_rows(int64_t value);
  public:

  // optional int64 cols = 2;
  bool has_cols() const;
  private:
  bool _internal_has_cols() const;
  public:
  void clear_cols();
  int64_t cols() const;
  void set_cols(int64_t value);
  private:
  int64_t _internal_cols() const;
  void _internal_set_cols(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:operations.CellArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
    int64_t rows_;
    int64_t cols_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocols_2foperations_2eproto;
};
// -------------------------------------------------------------------

class ActionSpecification_Argument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations.ActionSpecification.Argument) */ {
 public:
  inline ActionSpecification_Argument() : ActionSpecification_Argument(nullptr) {}
  ~ActionSpecification_Argument() override;
  explicit PROTOBUF_CONSTEXPR ActionSpecification_Argument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionSpecification_Argument(const ActionSpecification_Argument& from);
  ActionSpecification_Argument(ActionSpecification_Argument&& from) noexcept
    : ActionSpecification_Argument() {
    *this = ::std::move(from);
  }

  inline ActionSpecification_Argument& operator=(const ActionSpecification_Argument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionSpecification_Argument& operator=(ActionSpecification_Argument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionSpecification_Argument& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionSpecification_Argument* internal_default_instance() {
    return reinterpret_cast<const ActionSpecification_Argument*>(
               &_ActionSpecification_Argument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActionSpecification_Argument& a, ActionSpecification_Argument& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionSpecification_Argument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionSpecification_Argument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionSpecification_Argument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionSpecification_Argument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionSpecification_Argument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActionSpecification_Argument& from) {
    ActionSpecification_Argument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionSpecification_Argument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations.ActionSpecification.Argument";
  }
  protected:
  explicit ActionSpecification_Argument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueArrayFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .operations.CellArray value_array = 2;
  bool has_value_array() const;
  private:
  bool _internal_has_value_array() const;
  public:
  void clear_value_array();
  const ::operations::CellArray& value_array() const;
  PROTOBUF_NODISCARD ::operations::CellArray* release_value_array();
  ::operations::CellArray* mutable_value_array();
  void set_allocated_value_array(::operations::CellArray* value_array);
  private:
  const ::operations::CellArray& _internal_value_array() const;
  ::operations::CellArray* _internal_mutable_value_array();
  public:
  void unsafe_arena_set_allocated_value_array(
      ::operations::CellArray* value_array);
  ::operations::CellArray* unsafe_arena_release_value_array();

  // @@protoc_insertion_point(class_scope:operations.ActionSpecification.Argument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::operations::CellArray* value_array_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocols_2foperations_2eproto;
};
// -------------------------------------------------------------------

class ActionSpecification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:operations.ActionSpecification) */ {
 public:
  inline ActionSpecification() : ActionSpecification(nullptr) {}
  ~ActionSpecification() override;
  explicit PROTOBUF_CONSTEXPR ActionSpecification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActionSpecification(const ActionSpecification& from);
  ActionSpecification(ActionSpecification&& from) noexcept
    : ActionSpecification() {
    *this = ::std::move(from);
  }

  inline ActionSpecification& operator=(const ActionSpecification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionSpecification& operator=(ActionSpecification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActionSpecification& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActionSpecification* internal_default_instance() {
    return reinterpret_cast<const ActionSpecification*>(
               &_ActionSpecification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActionSpecification& a, ActionSpecification& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionSpecification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActionSpecification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActionSpecification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActionSpecification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActionSpecification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ActionSpecification& from) {
    ActionSpecification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionSpecification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "operations.ActionSpecification";
  }
  protected:
  explicit ActionSpecification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActionSpecification_Argument Argument;

  // accessors -------------------------------------------------------

  enum : int {
    kInputDataFieldNumber = 1,
    kScriptContentsFieldNumber = 2,
  };
  // repeated .operations.ActionSpecification.Argument input_data = 1;
  int input_data_size() const;
  private:
  int _internal_input_data_size() const;
  public:
  void clear_input_data();
  ::operations::ActionSpecification_Argument* mutable_input_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations::ActionSpecification_Argument >*
      mutable_input_data();
  private:
  const ::operations::ActionSpecification_Argument& _internal_input_data(int index) const;
  ::operations::ActionSpecification_Argument* _internal_add_input_data();
  public:
  const ::operations::ActionSpecification_Argument& input_data(int index) const;
  ::operations::ActionSpecification_Argument* add_input_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations::ActionSpecification_Argument >&
      input_data() const;

  // optional string script_contents = 2;
  bool has_script_contents() const;
  private:
  bool _internal_has_script_contents() const;
  public:
  void clear_script_contents();
  const std::string& script_contents() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script_contents(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script_contents();
  PROTOBUF_NODISCARD std::string* release_script_contents();
  void set_allocated_script_contents(std::string* script_contents);
  private:
  const std::string& _internal_script_contents() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script_contents(const std::string& value);
  std::string* _internal_mutable_script_contents();
  public:

  // @@protoc_insertion_point(class_scope:operations.ActionSpecification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations::ActionSpecification_Argument > input_data_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_contents_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protocols_2foperations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CellArray

// optional int64 rows = 1;
inline bool CellArray::_internal_has_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CellArray::has_rows() const {
  return _internal_has_rows();
}
inline void CellArray::clear_rows() {
  _impl_.rows_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t CellArray::_internal_rows() const {
  return _impl_.rows_;
}
inline int64_t CellArray::rows() const {
  // @@protoc_insertion_point(field_get:operations.CellArray.rows)
  return _internal_rows();
}
inline void CellArray::_internal_set_rows(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rows_ = value;
}
inline void CellArray::set_rows(int64_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:operations.CellArray.rows)
}

// optional int64 cols = 2;
inline bool CellArray::_internal_has_cols() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CellArray::has_cols() const {
  return _internal_has_cols();
}
inline void CellArray::clear_cols() {
  _impl_.cols_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int64_t CellArray::_internal_cols() const {
  return _impl_.cols_;
}
inline int64_t CellArray::cols() const {
  // @@protoc_insertion_point(field_get:operations.CellArray.cols)
  return _internal_cols();
}
inline void CellArray::_internal_set_cols(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cols_ = value;
}
inline void CellArray::set_cols(int64_t value) {
  _internal_set_cols(value);
  // @@protoc_insertion_point(field_set:operations.CellArray.cols)
}

// repeated string values = 3;
inline int CellArray::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int CellArray::values_size() const {
  return _internal_values_size();
}
inline void CellArray::clear_values() {
  _impl_.values_.Clear();
}
inline std::string* CellArray::add_values() {
  std::string* _s = _internal_add_values();
  // @@protoc_insertion_point(field_add_mutable:operations.CellArray.values)
  return _s;
}
inline const std::string& CellArray::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline const std::string& CellArray::values(int index) const {
  // @@protoc_insertion_point(field_get:operations.CellArray.values)
  return _internal_values(index);
}
inline std::string* CellArray::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:operations.CellArray.values)
  return _impl_.values_.Mutable(index);
}
inline void CellArray::set_values(int index, const std::string& value) {
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:operations.CellArray.values)
}
inline void CellArray::set_values(int index, std::string&& value) {
  _impl_.values_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:operations.CellArray.values)
}
inline void CellArray::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations.CellArray.values)
}
inline void CellArray::set_values(int index, const char* value, size_t size) {
  _impl_.values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations.CellArray.values)
}
inline std::string* CellArray::_internal_add_values() {
  return _impl_.values_.Add();
}
inline void CellArray::add_values(const std::string& value) {
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations.CellArray.values)
}
inline void CellArray::add_values(std::string&& value) {
  _impl_.values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:operations.CellArray.values)
}
inline void CellArray::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations.CellArray.values)
}
inline void CellArray::add_values(const char* value, size_t size) {
  _impl_.values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations.CellArray.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CellArray::values() const {
  // @@protoc_insertion_point(field_list:operations.CellArray.values)
  return _impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CellArray::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:operations.CellArray.values)
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// ActionSpecification_Argument

// optional string name = 1;
inline bool ActionSpecification_Argument::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActionSpecification_Argument::has_name() const {
  return _internal_has_name();
}
inline void ActionSpecification_Argument::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActionSpecification_Argument::name() const {
  // @@protoc_insertion_point(field_get:operations.ActionSpecification.Argument.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActionSpecification_Argument::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations.ActionSpecification.Argument.name)
}
inline std::string* ActionSpecification_Argument::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations.ActionSpecification.Argument.name)
  return _s;
}
inline const std::string& ActionSpecification_Argument::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ActionSpecification_Argument::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ActionSpecification_Argument::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ActionSpecification_Argument::release_name() {
  // @@protoc_insertion_point(field_release:operations.ActionSpecification.Argument.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ActionSpecification_Argument::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations.ActionSpecification.Argument.name)
}

// optional .operations.CellArray value_array = 2;
inline bool ActionSpecification_Argument::_internal_has_value_array() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_array_ != nullptr);
  return value;
}
inline bool ActionSpecification_Argument::has_value_array() const {
  return _internal_has_value_array();
}
inline void ActionSpecification_Argument::clear_value_array() {
  if (_impl_.value_array_ != nullptr) _impl_.value_array_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations::CellArray& ActionSpecification_Argument::_internal_value_array() const {
  const ::operations::CellArray* p = _impl_.value_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations::CellArray&>(
      ::operations::_CellArray_default_instance_);
}
inline const ::operations::CellArray& ActionSpecification_Argument::value_array() const {
  // @@protoc_insertion_point(field_get:operations.ActionSpecification.Argument.value_array)
  return _internal_value_array();
}
inline void ActionSpecification_Argument::unsafe_arena_set_allocated_value_array(
    ::operations::CellArray* value_array) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_array_);
  }
  _impl_.value_array_ = value_array;
  if (value_array) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations.ActionSpecification.Argument.value_array)
}
inline ::operations::CellArray* ActionSpecification_Argument::release_value_array() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations::CellArray* temp = _impl_.value_array_;
  _impl_.value_array_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::operations::CellArray* ActionSpecification_Argument::unsafe_arena_release_value_array() {
  // @@protoc_insertion_point(field_release:operations.ActionSpecification.Argument.value_array)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations::CellArray* temp = _impl_.value_array_;
  _impl_.value_array_ = nullptr;
  return temp;
}
inline ::operations::CellArray* ActionSpecification_Argument::_internal_mutable_value_array() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations::CellArray>(GetArenaForAllocation());
    _impl_.value_array_ = p;
  }
  return _impl_.value_array_;
}
inline ::operations::CellArray* ActionSpecification_Argument::mutable_value_array() {
  ::operations::CellArray* _msg = _internal_mutable_value_array();
  // @@protoc_insertion_point(field_mutable:operations.ActionSpecification.Argument.value_array)
  return _msg;
}
inline void ActionSpecification_Argument::set_allocated_value_array(::operations::CellArray* value_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_array_;
  }
  if (value_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_array);
    if (message_arena != submessage_arena) {
      value_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_array, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_array_ = value_array;
  // @@protoc_insertion_point(field_set_allocated:operations.ActionSpecification.Argument.value_array)
}

// -------------------------------------------------------------------

// ActionSpecification

// repeated .operations.ActionSpecification.Argument input_data = 1;
inline int ActionSpecification::_internal_input_data_size() const {
  return _impl_.input_data_.size();
}
inline int ActionSpecification::input_data_size() const {
  return _internal_input_data_size();
}
inline void ActionSpecification::clear_input_data() {
  _impl_.input_data_.Clear();
}
inline ::operations::ActionSpecification_Argument* ActionSpecification::mutable_input_data(int index) {
  // @@protoc_insertion_point(field_mutable:operations.ActionSpecification.input_data)
  return _impl_.input_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations::ActionSpecification_Argument >*
ActionSpecification::mutable_input_data() {
  // @@protoc_insertion_point(field_mutable_list:operations.ActionSpecification.input_data)
  return &_impl_.input_data_;
}
inline const ::operations::ActionSpecification_Argument& ActionSpecification::_internal_input_data(int index) const {
  return _impl_.input_data_.Get(index);
}
inline const ::operations::ActionSpecification_Argument& ActionSpecification::input_data(int index) const {
  // @@protoc_insertion_point(field_get:operations.ActionSpecification.input_data)
  return _internal_input_data(index);
}
inline ::operations::ActionSpecification_Argument* ActionSpecification::_internal_add_input_data() {
  return _impl_.input_data_.Add();
}
inline ::operations::ActionSpecification_Argument* ActionSpecification::add_input_data() {
  ::operations::ActionSpecification_Argument* _add = _internal_add_input_data();
  // @@protoc_insertion_point(field_add:operations.ActionSpecification.input_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::operations::ActionSpecification_Argument >&
ActionSpecification::input_data() const {
  // @@protoc_insertion_point(field_list:operations.ActionSpecification.input_data)
  return _impl_.input_data_;
}

// optional string script_contents = 2;
inline bool ActionSpecification::_internal_has_script_contents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ActionSpecification::has_script_contents() const {
  return _internal_has_script_contents();
}
inline void ActionSpecification::clear_script_contents() {
  _impl_.script_contents_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ActionSpecification::script_contents() const {
  // @@protoc_insertion_point(field_get:operations.ActionSpecification.script_contents)
  return _internal_script_contents();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActionSpecification::set_script_contents(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.script_contents_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:operations.ActionSpecification.script_contents)
}
inline std::string* ActionSpecification::mutable_script_contents() {
  std::string* _s = _internal_mutable_script_contents();
  // @@protoc_insertion_point(field_mutable:operations.ActionSpecification.script_contents)
  return _s;
}
inline const std::string& ActionSpecification::_internal_script_contents() const {
  return _impl_.script_contents_.Get();
}
inline void ActionSpecification::_internal_set_script_contents(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.script_contents_.Set(value, GetArenaForAllocation());
}
inline std::string* ActionSpecification::_internal_mutable_script_contents() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.script_contents_.Mutable(GetArenaForAllocation());
}
inline std::string* ActionSpecification::release_script_contents() {
  // @@protoc_insertion_point(field_release:operations.ActionSpecification.script_contents)
  if (!_internal_has_script_contents()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.script_contents_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_contents_.IsDefault()) {
    _impl_.script_contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ActionSpecification::set_allocated_script_contents(std::string* script_contents) {
  if (script_contents != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.script_contents_.SetAllocated(script_contents, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_contents_.IsDefault()) {
    _impl_.script_contents_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations.ActionSpecification.script_contents)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace operations

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocols_2foperations_2eproto
